def event = currentBuild.getBuildCauses()[0].event
library 'pipeline-library'
pipeline {
  agent none
  environment {
    OPS_CASC_UPDATE_SECRET = credentials('casc-update-secret')
    CONTROLLER_CASC_UPDATE_SECRET = event.secret.toString()
    CONTROLLER_NAMESPACE = "cloudbees-core"
  }
  options { timeout(time: 4, unit: 'MINUTES') }
  triggers {
    eventTrigger jmespathQuery("controller.action=='casc_bundle_update'")
  }
  stages {
    stage('Configuration Bundle Update') {
      agent {
        kubernetes {
          yaml libraryResource ('podtemplates/kubectl.yml')
        }
      }
      environment {       
        GITHUB_ORGANIZATION = event.github.organization.toString().replaceAll(" ", "-")
        GITHUB_REPOSITORY = event.github.repository.toString().toLowerCase()
        CONTROLLER_FOLDER = GITHUB_ORGANIZATION.toLowerCase()
        BUNDLE_ID = event.controller.bundle_id.toString().toLowerCase()  
        AUTO_RELOAD = event.casc.auto_reload.toString()        
      }
      when {
        triggeredBy 'EventTriggerCause'
        environment name: 'CONTROLLER_CASC_UPDATE_SECRET', value: OPS_CASC_UPDATE_SECRET
      }
      stages {
        stage('Bundle Update') {
          stages {
            stage('Copy Files') {
              steps {
                container("kubectl") {
                  withCredentials([usernamePassword(credentialsId: "cloudbees-ci-casc-workshop-github-app",
                                          usernameVariable: 'GITHUB_APP',
                                          passwordVariable: 'GITHUB_ACCESS_TOKEN')]) {
                    sh '''
                      rm -rf ./${BUNDLE_ID} || true
                      rm -rf ./checkout || true
                      mkdir -p ${BUNDLE_ID}
                      mkdir -p checkout
                      git clone https://github.com/${GITHUB_ORGANIZATION}/${GITHUB_REPOSITORY}.git checkout
                    '''
                  }
                  dir('checkout/bundle') {
                    sh "cp --parents `find -name \\*.yaml*` ../../${BUNDLE_ID}/"
                  }
                  sh '''
                    ls -la ${BUNDLE_ID}
                    kubectl exec --namespace cloudbees-core cjoc-0 -- rm -rf /var/jenkins_home/jcasc-bundles-store/${BUNDLE_ID} || true
                    kubectl cp --namespace cloudbees-core ${BUNDLE_ID} cjoc-0:/var/jenkins_home/jcasc-bundles-store/                    
                  '''
                  
                  withCredentials([usernamePassword(credentialsId: 'admin-cli-token', usernameVariable: 'JENKINS_CLI_USR', passwordVariable: 'JENKINS_CLI_PSW')]) {
                    sh  '''
                      curl --user "$JENKINS_CLI_USR:$JENKINS_CLI_PSW" -XPOST \
                        -H "Accept: application/json"  \
                        http://cjoc/load-casc-bundles/checkout
                    '''
                  }
                }
              }              
            }
            stage('Auto Reload Bundle') {
              when {
                environment name: 'AUTO_RELOAD', value: "true"
              }
              steps {
                echo "begin config bundle reload"
                withCredentials([usernamePassword(credentialsId: 'admin-cli-token', usernameVariable: 'JENKINS_CLI_USR', passwordVariable: 'JENKINS_CLI_PSW')]) {
                  sh '''
                    curl --user $JENKINS_CLI_USR:$JENKINS_CLI_PSW -XGET -H "Accept: application/json" http://${BUNDLE_ID}.${CONTROLLER_NAMESPACE}.svc.cluster.local/casc-bundle-mgnt/check-bundle-update
                    curl --user $JENKINS_CLI_USR:$JENKINS_CLI_PSW -XPOST -H "Accept: application/json" http://${BUNDLE_ID}.${CONTROLLER_NAMESPACE}.svc.cluster.local/casc-bundle-mgnt/reload-bundle
                  '''
                }
              }
            }
          }
        }
      }  
    }
  }
}